/script AutoReju()


function AutoReju()
    -- ===== CONFIGURABLE SETTINGS =====
    local HEALTH_THRESHOLD = 90
    local REJUV_COST = 360
    local REJUV_BLOCK_TIME = 12
    local REJUVENATION_RANK = 0
    local SCAN_THROTTLE = 0.15
    -- ==================================
    
    local start, duration = GetSpellCooldown(61, BOOKTYPE_SPELL)
    if start > 0 and (GetTime() - start) < duration then return end
    
    if not AutoRejuLastScan then AutoRejuLastScan = 0 end
    local currentTime = GetTime()
    if (currentTime - AutoRejuLastScan) < SCAN_THROTTLE then return end
    AutoRejuLastScan = currentTime
    
    if UnitMana("player") < REJUV_COST then return end
    if not RejuvDateTimes then RejuvDateTimes = {} end
    
    local oldTarget = UnitName("target")
    
    local function GetDateTimeSeconds()
        local timeStr = date("%H:%M:%S")
        local hour = tonumber(string.sub(timeStr, 1, 2))
        local min = tonumber(string.sub(timeStr, 4, 5))
        local sec = tonumber(string.sub(timeStr, 7, 8))
        return (hour * 3600) + (min * 60) + sec
    end
    
    local function ShouldSkipRejuv(unitName)
        local lastCastTime = RejuvDateTimes[unitName]
        if lastCastTime then
            local currentTime = GetDateTimeSeconds()
            local elapsed = currentTime - lastCastTime
            if elapsed < 0 then elapsed = elapsed + 86400 end
            if elapsed < REJUV_BLOCK_TIME then
                return true
            else
                RejuvDateTimes[unitName] = nil
            end
        end
        return false
    end
    
    local function HasReju(unit)
        if not UnitExists(unit) then return false end
        for i = 1, 16 do
            local texture = UnitBuff(unit, i)
            if texture and (string.find(texture, "Spell_Nature_Rejuvenation") or string.find(texture, "Rejuvenation")) then
                return true
            end
        end
        for i = 0, 15 do
            local buff = GetPlayerBuff(i, unit)
            if buff ~= -1 then
                local texture = GetPlayerBuffTexture(buff)
                if texture and (string.find(texture, "Spell_Nature_Rejuvenation") or string.find(texture, "Rejuvenation")) then
                    return true
                end
            end
        end
        return false
    end
    
    local function NeedsHeal(unit)
        if not UnitExists(unit) or UnitIsDead(unit) then return false end
        if not UnitIsFriend("player", unit) then return false end
        if HasReju(unit) then return false end
        local unitName = UnitName(unit)
        if not unitName then return false end
        if ShouldSkipRejuv(unitName) then return false end
        local hp = UnitHealth(unit)
        local maxhp = UnitHealthMax(unit)
        if hp == 0 or maxhp == 0 then return false end
        return (hp / maxhp * 100) <= HEALTH_THRESHOLD
    end
    
    local function GetHealthPercent(unit)
        if not UnitExists(unit) then return 100 end
        local hp = UnitHealth(unit)
        local maxhp = UnitHealthMax(unit)
        if maxhp == 0 then return 100 end
        return (hp / maxhp * 100)
    end
    
    local function CastReju(unit)
        local unitName = UnitName(unit)
        if not unitName then return false end
        TargetUnit(unit)
        if UnitExists("target") then
            if CheckInteractDistance("target", 4) or SpellIsTargeting() then
                local rejuvenationSpell = (REJUVENATION_RANK == 0) and "Rejuvenation()" or "Rejuvenation(Rank " .. REJUVENATION_RANK .. ")"
                cast(rejuvenationSpell)
                RejuvDateTimes[unitName] = GetDateTimeSeconds()
                return true
            end
        end
        return false
    end
    
    local targets = {}
    
    if NeedsHeal("mouseover") then
        local unitName = UnitName("mouseover")
        if unitName then
            table.insert(targets, {unit = "mouseover", name = unitName, health = GetHealthPercent("mouseover"), priority = 1})
        end
    end
    
    if NeedsHeal("target") then
        local unitName = UnitName("target")
        if unitName then
            table.insert(targets, {unit = "target", name = unitName, health = GetHealthPercent("target"), priority = 2})
        end
    end
    
    for i = 1, 4 do
        local unit = "party" .. i
        if NeedsHeal(unit) then
            local unitName = UnitName(unit)
            if unitName then
                table.insert(targets, {unit = unit, name = unitName, health = GetHealthPercent(unit), priority = 3})
            end
        end
    end
    
    for i = 1, 40 do
        local unit = "raid" .. i
        if NeedsHeal(unit) then
            local unitName = UnitName(unit)
            if unitName then
                table.insert(targets, {unit = unit, name = unitName, health = GetHealthPercent(unit), priority = 4})
            end
        end
    end
    
    if NeedsHeal("player") then
        local unitName = UnitName("player")
        if unitName then
            table.insert(targets, {unit = "player", name = unitName, health = GetHealthPercent("player"), priority = 5})
        end
    end
    
    table.sort(targets, function(a, b)
        if a.priority ~= b.priority then
            return a.priority < b.priority
        else
            return a.health < b.health
        end
    end)
    
    for _, target in targets do
        if CastReju(target.unit) then
            if oldTarget then TargetByName(oldTarget) end
            return
        end
    end
    
    if oldTarget then TargetByName(oldTarget) end
end
